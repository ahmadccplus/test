//LAB 1

//1.1
//______________________________________________________________________________

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main()
{
pid_t child= fork();
if (child <0)
printf("error");
else if (child ==0)
{  
printf( "Hello from the child %d \n" , getpid());
printf("my parent %d \n",getppid());
}
else if (child>0)
{
printf ("Hello from the parent %d \n" , getpid ());}}

//______________________________________________________________________________

//1.2

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
int main() {
pid_t child = fork(); // Create a child process
if (child < 0) {
// If fork fails
printf("Error\n");
exit(1);
}
else if (child == 0) {
// Child process
printf("Hello from the child %d \n", getpid());
printf("My parent is %d\n", getppid());
}
else {
// Parent process waits for the child to finish
wait(NULL); // Ensures that the parent waits for the child to finish
// After the child finishes, the parent continues
printf("Child process has finished. Now the parent %d is done.\n", getpid());
}
return 0;
}

//______________________________________________________________________________

//LAB2

// WRITE FILE

#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>


int main() {
key_t my_key = ftok("shmfile",65); // ftok function is used to generate unique key
int shmid = shmget(my_key,1024,0666|IPC_CREAT); // shmget returns an ide in shmid
char *str = (char*) shmat(shmid,(void*)0,0); // shmat to join to shared memory
printf("Write Data :");
fgets(str, 50, stdin);
printf("Data written in memory: %s\n",str);
//detach from shared memory
shmdt(str);
}


//______________________________________________________________________________

// READ FILE
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>

int main(){
key_t my_key = ftok("shmfile",65); // ftok function is used to generate unique key
int shmid = shmget(my_key,1024,0666|IPC_CREAT); // shmget returns an ide in shmid
char *str = (char*) shmat(shmid,(void*)0,0); // shmat to join to shared memory
printf("Data read from memory: %s\n",str);
shmdt(str);
}

//______________________________________________________________________________

//LAB 3
//3.1


#include <stdio.h>
#include <assert.h>
#include <pthread.h>

void *mythread (void *arg)
{ 
    printf("%s\n", (char *) arg);
    return NULL; 
}

int main (int argc, char *argv[])
{
    pthread_t p1, p2;
    int rc;
    printf("Main begins\n");
    rc = pthread_create(&p1, NULL, mythread, "A"); assert (rc == 0);
    rc = pthread_create(&p2, NULL, mythread, "B"); assert (rc == 0);
    rc = pthread_join (p1, NULL); assert (rc == 0);
    rc = pthread_join (p2, NULL); assert (rc == 0);
    printf ("Main Ends\n");
    return 0;
}


//______________________________________________________________________________

//3.2

#include <stdio.h>
#include <pthread.h>
void *print_message(void*ptr);
int main(void)
{
pthread_t thread1, thread2;
char * message1="Thread1";
char * message2="Thread2";
int ret1, ret2;
ret1=pthread_create(&thread1, NULL, print_message, (void*)message1 );
ret2=pthread_create(&thread2, NULL, print_message, (void*) message2 );
pthread_join(thread1, NULL);
pthread_join(thread2, NULL);
printf("Thread1 returns %d\n",ret1);
printf("Thread2 returns %d\n",ret2);
}
void *print_message(void*ptr)
{
char* message;
message=(char*)ptr;
printf("%s\n", message);
}

//______________________________________________________________________________

//LAB 4

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
sem_t semaphore; // Declare a semaphore
void* thread_function(void* arg) {
// Wait (decrease the semaphore count)
sem_wait(&semaphore);
printf("Thread %ld is in the critical section\n", (long)arg);
// Simulate some work in the critical section
sleep(2);
printf("Thread %ld is leaving the critical section\n", (long)arg);
// Signal (increase the semaphore count)
sem_post(&semaphore);
return NULL;
}

int main() {
pthread_t t1, t2, t3;
// Initialize the semaphore with a count of 1 (only one thread allowed in)
sem_init(&semaphore, 0, 1);
// Create three threads
pthread_create(&t1, NULL, thread_function, (void*)1);
pthread_create(&t2, NULL, thread_function, (void*)2);
pthread_create(&t3, NULL, thread_function, (void*)3);
// Wait for the threads to complete
pthread_join(t1, NULL);
pthread_join(t2, NULL);
pthread_join(t3, NULL);
// Destroy the semaphore
sem_destroy(&semaphore);
return 0;
}


//______________________________________________________________________________

//LAB 5
#include<stdio.h>
#include<stdlib.h>
#include<sys/shm.h>
#include<unistd.h>
#include<string.h>
#include<sys/wait.h>  // Changed from <wait.h>

int main()
{
//file to key
key_t key=ftok("sharedfile.txt",65); //72847618746186
//shared memory id = shared memory get for creation
int shmid=shmget(key,1024,0666|IPC_CREAT);
char *shared_memory =(char*)shmat(shmid,NULL,0);
pid_t pid=fork();//create a new process
if (pid<0)
{
printf("Error");
}
else if(pid==0)
{
//child
char *messages[]={"HELLO","WORLD"};
for (int i=0;i<2;i++)
{
//string copy
strcpy(shared_memory,messages[i]);
printf("child writes %s\n",messages[i]);
sleep(2);
}
//shared memory deattach
shmdt(shared_memory);
}
else
{
//parent will read from the memory
for (int i=0;i<2;i++)
{
sleep(1);
printf("parent read from memory %s\n",shared_memory);
}
wait(NULL);//parent waits for the child
shmdt(shared_memory);
}
return 0;  // Added return statement
}

//______________________________________________________________________________

//LAB 6

#include<stdio.h>
#include<stdlib.h>
int main()
{
FILE *file;
char data[100];
file=fopen("example.txt","w");
//file print
fprintf(file,"Hello this is a test file");
fclose(file);
printf("Data Written to file\n");
file=fopen("example.txt","r");
printf("Data Read from the file\n");
while(fgets(data,sizeof(data),file)!=NULL)
{
printf("%s",data);
}
fclose(file);
}
